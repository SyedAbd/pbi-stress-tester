Power BI Embedded Report Stress Testing Tool
Overview
This tool is built to simulate user interaction with Power BI Embedded reports and monitor backend server performance under load. It mimics real-world usage patterns by automating actions like navigating across report pages, applying filters, and tracking system resource usage such as CPU load.

The tool supports token-based authentication (using Power BI Embed Tokens or Azure AD) to ensure secure, scoped access to reports, making it suitable for enterprise-level deployments.

🔐 Authentication
Power BI Embedded supports two main authentication flows:

Embed Token (App owns data) – For ISVs or apps embedding reports into custom portals

Azure AD + Service Principal (User owns data) – For secure organizational access with delegated permissions

This tool assumes you're using one of these secure methods to generate access tokens and embed reports. You can easily integrate it into your existing token generation and embedding logic.

✅ Features
Simulates multi-page navigation in embedded reports

Applies dynamic report-level filters

Token-based authentication (Embed Token / Azure AD)

Tracks server-side performance (e.g., CPU usage)

Logs actions for debugging and optimization

Compatible with Power BI REST API and JavaScript SDK

🎯 Use Cases
Stress Testing – Benchmark how your embedded report performs under simulated user load

Optimization – Identify slow filters, visuals, or pages causing performance bottlenecks

Capacity Planning – Forecast system load before scaling to hundreds/thousands of users

⚙️ Requirements
Power BI Pro or Premium workspace with Embedded capacity

Power BI REST API and JavaScript SDK

Token-based authentication (Embed Token or Azure AD)

Node.js or preferred runtime (based on how the automation is built)

Performance monitoring via Azure Monitor, Windows Performance Counters, or custom logging

🔄 How It Works
Authenticate with Power BI using Embed Token or Azure AD

Load the embedded report in a headless browser or automated frontend

Navigate between pages programmatically (via JS API or simulated DOM interaction)

Apply Filters (e.g., slicers or custom filter objects)

Monitor CPU Usage during actions to detect spikes or slowdowns

Log Results for later analysis and optimization
